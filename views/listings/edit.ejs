<% layout("/layouts/boilerplate.ejs")%>
<style>
  .text-center {
    font-size: 0.8rem !important;
  }
  #enumOptionsWrapper {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1050;
    display: none;
    max-height: 95vh;
    overflow-y: auto;
    width: 90vw;
    max-width: 520px;
  }
  #overlay {
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1040;
    display: none;
  }
  .container {
    max-width: 550px;
    margin: 0 auto;
    background-color: #fff;
    border-radius: 24px;
    padding: 35px;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.12);
  }
  .progress-bar {
    height: 5px;
    background-color: #e0e0e0;
    border-radius: 3px;
    overflow: hidden;
    margin-bottom: 32px;
  }
  .progress-bar-fill {
    height: 100%;
    background-color: #4a90e2;
    border-radius: 3px;
    width: 0%;
    transition: width 0.3s ease;
  }
  .step {
    border: 1px solid #ccc;
    border-radius: 16px;
    padding: 24px;
    max-height: 370px;
    overflow-y: auto;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }
  .hidden {
    display: none;
  }
  label.section-title {
    font-weight: 900;
    font-size: 18px;
    margin-bottom: 16px;
    display: block;
    color: #484848;
  }
  .grid-2 {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
    margin-bottom: 24px;
  }
  .grid-3 {
    display: grid;
    grid-template-columns: repeat(2, 1fr) !important;
    gap: 12px;
    margin-bottom: 16px;
  }
  .btn-select {
    display: flex;
    flex-direction: column;
    align-items: start;
    justify-content: end;
    height: 100px;
    padding: 12px;
    border-radius: 12px;
    cursor: pointer;
    font-weight: 600;
    border: 1px solid #d9d9d8;
    text-align: left;
    user-select: none;
    transition: all 0.2s ease;
    background-color: #fff;
    color: #000;
  }
  .btn-select:hover:not(.selected) {
    background-color: #e6f0ff;
  }
  .btn-select.selected {
    background-color: #dddddc;
    color: #000;
    border: 2px solid black;
  }
  .nav-buttons {
    display: flex;
    justify-content: space-between;
    margin-top: 40px;
  }
  button.nav-btn {
    padding: 10px 20px;
    border-radius: 16px;
    background-color: #4a90e2;
    color: #fff;
    border: 1px solid transparent;
    cursor: pointer;
    font-weight: 600;
    font-size: 16px;
    user-select: none;
    transition: background-color 0.3s ease, box-shadow 0.2s ease;
  }
  button.nav-btn:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
  button.nav-btn:hover:not(:disabled) {
    background-color: #d3d3d3;
    color: #000;
  }
  button.nav-btn:active:not(:disabled) {
    background-color: #a0a0a0;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
    color: #000;
  }
  .btn-select .btn_icon {
    font-size: 3rem;
  }
  .material-symbols-outlined {
    font-size: 32px;
    margin-bottom: 6px;
  }
  .label-text {
    font-size: 14px;
  }
  .grid-3 {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 12px;
    margin-bottom: 16px;
  }
  #placeTypes {
    display: flex;
    flex-wrap: wrap;
    gap: 16px; /* space between items */
    margin-bottom: 16px;
    justify-content: space-evenly;
  }
  #enumOptionsWrapper::-webkit-scrollbar {
    width: 6px;
  }
  #enumOptionsWrapper::-webkit-scrollbar-thumb {
    background: #ccc;
    border-radius: 10px;
  }
  #enumOptionsWrapper:focus {
    outline: none;
  }
  .step {
    transition: opacity 0.3s ease;
  }
  .step.hidden {
    opacity: 0;
    pointer-events: none;
    position: absolute;
  }
  #enumOptionsWrapper.hidden,
  #overlay.hidden {
    display: none !important;
  }
</style>

<script>
  const existingSelections = {
    propertyType: "<%= listing.propertyType || '' %>",
    placeType: "<%= listing.placeType || '' %>",
    tags: <%- JSON.stringify(listing.tags || []) %>,
    amenities: <%- JSON.stringify(listing.amenities || []) %>,
    topPicks: <%- JSON.stringify(listing.topPicks || []) %>
  };
</script>

<script>
  (() => {
    // Inside renderOptions function in your script:
    function renderOptions(containerId, options, single, onUpdate) {
      const container = document.getElementById(containerId);
      container.innerHTML = "";

      options.forEach((opt) => {
        const div = document.createElement("div");
        div.className = "btn-select";
        div.innerHTML = `
          <span class="material-symbols-outlined btn_icon">${opt.icon}</span>
          <span class="label-text">${opt.label}</span>
        `;
        div.dataset.value = opt.label;

        const key =
          containerId === "propertyTypes"
            ? "propertyType"
            : containerId === "placeTypes"
            ? "placeType"
            : containerId === "categories"
            ? "tags"
            : containerId === "amenities"
            ? "amenities"
            : containerId === "topPicks"
            ? "topPicks"
            : "";

        const existing = existingSelections[key];

        if (
          (single && existing === opt.label) ||
          (!single && Array.isArray(existing) && existing.includes(opt.label))
        ) {
          div.classList.add("selected");
        }

        div.onclick = () => {
          if (single) {
            [...container.children].forEach((el) =>
              el.classList.remove("selected")
            );
            div.classList.add("selected");
            onUpdate(opt.label);
          } else {
            div.classList.toggle("selected");
            onUpdate();
          }
        };

        container.appendChild(div);

        // trigger update
        if (div.classList.contains("selected")) {
          if (single) onUpdate(opt.label);
          else onUpdate();
        }
      });
    }
  })();
</script>

<body>
  <div class="row">
    <div class="col-8 offset-2 mt-2">
      <h2>Edit your Listing</h2>
      <form
        method="POST"
        action="/listings/<%=listing._id%>?_method=PUT"
        novalidate
        class="needs-validation"
        enctype="multipart/form-data"
      >
        <div class="mb-3">
          <label for="title" class="form-label">Title</label>
          <input
            name="listing[title]"
            type="text"
            value="<%= listing.title %>"
            class="form-control"
            required
          />
          <div class="valid-feedback">Looks good!</div>
          <div class="invalid-feedback">Write a catchy title.</div>
        </div>

        <div class="mb-3">
          <label for="description" class="form-label">Description</label>
          <textarea
            name="listing[description]"
            class="form-control"
            rows="4"
            required
          >
<%= listing.description %></textarea
          >
          <div class="invalid-feedback">Write a short description.</div>
        </div>
        <div>
          <p class="mb-0">Original Listing Image</p>
          <img
            src="<%= originalImgUrl %>"
            class="card-img-top"
            alt="listing_img"
            style="height: 185px; width: 280px"
          />
        </div>

        <div class="mb-3">
          <label for="image" class="form-label">Update Image</label>
          <input name="listing[image][url]" type="file" class="form-control" />
        </div>

        <div class="row">
          <div class="mb-3 col-md-4">
            <label for="price" class="form-label">Price</label>
            <input
              name="listing[price]"
              type="number"
              value="<%= listing.price %>"
              class="form-control"
              required
            />
            <div class="invalid-feedback">Price should be valid.</div>
          </div>

          <div class="mb-3 col-md-8">
            <label for="location" class="form-label">Location</label>
            <input
              name="listing[location]"
              type="text"
              value="<%= listing.location %>"
              class="form-control"
              required
            />
            <div class="invalid-feedback">Location should be valid.</div>
          </div>
        </div>

        <div class="row">
          <div class="mb-3 col-md-9">
            <label for="country" class="form-label">Country</label>
            <input
              name="listing[country]"
              type="text"
              value="<%= listing.country %>"
              class="form-control"
              required
            />
            <div class="invalid-feedback">Country should be valid.</div>
          </div>

          <div class="mb-3 col-md-3">
            <label class="form-label d-block">&nbsp;</label>
            <div
              class="form-control d-flex align-items-center justify-content-center"
              style="cursor: pointer"
              id="moreOptionsBox"
            >
              <input type="checkbox" id="toggleEnumOptions" class="d-none" />
              <label for="toggleEnumOptions" class="mb-0 w-100 text-center">
                Add More Options
              </label>
            </div>
            <div id="overlay"></div>

            <div id="enumOptionsWrapper" style="display: none">
              <div class="container">
                <div class="progress-bar">
                  <div class="progress-bar-fill"></div>
                </div>
                <button
                  type="button"
                  id="closeModalBtn"
                  style="
                    position: absolute;
                    top: 20px;
                    right: 30px;
                    background: transparent;
                    border: none;
                    font-size: 24px;
                    cursor: pointer;
                    z-index: 9999;
                  "
                >
                  &times;
                </button>
                <div id="step1" class="step">
                  <label class="section-title">Property Type</label>
                  <div class="grid-2" id="propertyTypes"></div>
                </div>
                <div id="step2" class="step hidden">
                  <label class="section-title">Type of Place</label>
                  <div class="grid-1" id="placeTypes"></div>
                </div>
                <div id="step3" class="step hidden">
                  <label class="section-title">Listing Categories</label>
                  <div class="grid-3" id="categories"></div>
                </div>
                <div id="step4" class="step hidden">
                  <label class="section-title">Amenities</label>
                  <div class="grid-3" id="amenities"></div>
                </div>
                <div id="step5" class="step hidden">
                  <label class="section-title">Top Picks</label>
                  <div class="grid-3" id="topPicks"></div>
                </div>
                <input
                  type="hidden"
                  name="listing[propertyType]"
                  id="propertyTypeInput"
                />
                <input
                  type="hidden"
                  name="listing[placeType]"
                  id="placeTypeInput"
                />

                <div id="categoryInputs"></div>
                <div id="amenityInputs"></div>
                <div id="topPickInputs"></div>

                <div class="nav-buttons">
                  <button type="button" id="backBtn" class="nav-btn">
                    Back
                  </button>
                  <button type="button" id="nextBtn" class="nav-btn">
                    Next
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        <br />
        <button class="btn btn-dark add-btn">Add</button>
        <br /><br />
        <br />
      </form>
    </div>
  </div>
  <script>
      (() => {
        const box = document.getElementById("moreOptionsBox");
        const checkbox = document.getElementById("toggleEnumOptions");
        const enumWrapper = document.getElementById("enumOptionsWrapper");
        const overlay = document.getElementById("overlay");

        const steps = ["step1", "step2", "step3", "step4", "step5"];
        let stepIndex = 0;
        const stepElements = steps.map((id) => document.getElementById(id));
        const backBtn = document.getElementById("backBtn");
        const nextBtn = document.getElementById("nextBtn");
        const progressBarFill = document.querySelector(".progress-bar-fill");

        backBtn.setAttribute("type", "button");
        nextBtn.setAttribute("type", "button");

        const propertyTypes = [
          { icon: "apartment", label: "Apartment" },
          { icon: "house", label: "House" },
          { icon: "villa", label: "Villa" },
          { icon: "cottage", label: "Guesthouse" },
          { icon: "hotel", label: "Hotel" },
        ];
        const placeTypes = [
          { icon: "home", label: "Entire Place" },
          { icon: "meeting_room", label: "Private Room" },
          { icon: "bed", label: "Shared Room" },
        ];
        const categories = [
          { icon: "trending_up", label: "Trending" },
          { icon: "beach_access", label: "Beach" },
          { icon: "location_city", label: "Iconic Cities" },
          { icon: "terrain", label: "Mountains" },
          { icon: "meeting_room", label: "Rooms" },
          { icon: "pool", label: "Amazing Pools" },
          { icon: "park", label: "Camping" },
          { icon: "water", label: "Lake Front" },
          { icon: "castle", label: "Castles" },
          { icon: "agriculture", label: "Farms" },
          { icon: "home", label: "Tiny House" },
          { icon: "cable", label: "Cable Car" },
          { icon: "hotel", label: "Hotels" },
          { icon: "temple_buddhist", label: "Worship" },
          { icon: "account_balance", label: "Domes" },
          { icon: "directions_boat", label: "Boats" },
        ];
        const amenities = [
          { icon: "wifi", label: "WiFi" },
          { icon: "kitchen", label: "Kitchen" },
          { icon: "local_parking", label: "Free Parking" },
          { icon: "ac_unit", label: "Air Conditioning" },
          { icon: "local_laundry_service", label: "Washer" },
          { icon: "tv", label: "TV" },
          { icon: "pool", label: "Pool" },
          { icon: "whatshot", label: "Heating" },
          { icon: "laptop", label: "Workspace" },
          { icon: "pets", label: "Pet-Friendly" },
        ];
        const topPicks = [
          { icon: "bolt", label: "Instant Book" },
          { icon: "cancel", label: "Free Cancellation" },
          { icon: "pets", label: "Pets Allowed" },
          { icon: "eco", label: "Eco-friendly Stay" },
        ];

        const propertyInput = document.getElementById("propertyTypeInput");
        const placeInput = document.getElementById("placeTypeInput");
        const categoryInputs = document.getElementById("categoryInputs");
        const amenityInputs = document.getElementById("amenityInputs");
        const topPickInputs = document.getElementById("topPickInputs");

        let selectedTags = [];
        let selectedAmenities = [];
        let selectedTopPicks = [];

        // Preselect on page load
        const currentProperty = "<%= listing.propertyType %>";
        const currentPlace = "<%= listing.placeType %>";
        const currentTags = <%- JSON.stringify(listing.tags || []) %>;
        const currentAmenities = <%- JSON.stringify(listing.amenities || []) %>;
        const currentTopPicks = <%- JSON.stringify(listing.topPicks || []) %>;

        function renderOptions(containerId, options, single, onUpdate) {
          const container = document.getElementById(containerId);
          container.innerHTML = "";
          options.forEach((opt) => {
            const div = document.createElement("div");
            div.className = "btn-select";
            div.innerHTML = `
              <span class="material-symbols-outlined btn_icon">${opt.icon}</span>
              <span class="label-text">${opt.label}</span>
            `;
            div.dataset.value = opt.label;

            if (
              (containerId === "propertyTypes" && opt.label === currentProperty) ||
              (containerId === "placeTypes" && opt.label === currentPlace) ||
              (containerId === "categories" && currentTags.includes(opt.label)) ||
              (containerId === "amenities" && currentAmenities.includes(opt.label)) ||
              (containerId === "topPicks" && currentTopPicks.includes(opt.label))
            ) {
              div.classList.add("selected");
            }

            div.onclick = () => {
              if (single) {
                [...container.children].forEach((el) => el.classList.remove("selected"));
                div.classList.add("selected");
                onUpdate(opt.label);
              } else {
                div.classList.toggle("selected");
                onUpdate();
              }
            };
            container.appendChild(div);
          });
        }

        renderOptions("propertyTypes", propertyTypes, true, (val) => {
          propertyInput.value = val;
        });
        renderOptions("placeTypes", placeTypes, true, (val) => {
          placeInput.value = val;
        });
        renderOptions("categories", categories, false, updateSelectedInputs);
        renderOptions("amenities", amenities, false, updateSelectedInputs);
        renderOptions("topPicks", topPicks, false, updateSelectedInputs);

        function updateSelectedInputs() {
          selectedTags = [...new Set([...document.querySelectorAll("#categories .selected")].map(div => div.dataset.value))];
          categoryInputs.innerHTML = selectedTags.map(tag => `<input type="hidden" name="listing[tags][]" value="${tag}">`).join("");

          selectedAmenities = [...new Set([...document.querySelectorAll("#amenities .selected")].map(div => div.dataset.value))];
          amenityInputs.innerHTML = selectedAmenities.map(tag => `<input type="hidden" name="listing[amenities][]" value="${tag}">`).join("");

          selectedTopPicks = [...new Set([...document.querySelectorAll("#topPicks .selected")].map(div => div.dataset.value))];
          topPickInputs.innerHTML = selectedTopPicks.map(tag => `<input type="hidden" name="listing[topPicks][]" value="${tag}">`).join("");
        }

        function updateStepUI() {
          stepElements.forEach((el, i) => el.classList.toggle("hidden", i !== stepIndex));
          progressBarFill.style.width = `${((stepIndex + 1) / steps.length) * 100}%`;
          backBtn.disabled = stepIndex === 0;
          nextBtn.textContent = stepIndex === steps.length - 1 ? "Finish" : "Next";
        }
    // ✅ Add this block RIGHT BELOW
    window.addEventListener("DOMContentLoaded", () => {
      const selectedProperty = document.querySelector("#propertyTypes .selected");
      const selectedPlace = document.querySelector("#placeTypes .selected");

      if (selectedProperty) {
        propertyInput.value = selectedProperty.dataset.value;
      }

      if (selectedPlace) {
        placeInput.value = selectedPlace.dataset.value;
      }

      selectedTags = [...document.querySelectorAll("#categories .selected")].map(div => div.dataset.value);
      categoryInputs.innerHTML = [...new Set(selectedTags)]
        .map(tag => `<input type="hidden" name="listing[tags][]" value="${tag}">`)
        .join("");

      selectedAmenities = [...document.querySelectorAll("#amenities .selected")].map(div => div.dataset.value);
      amenityInputs.innerHTML = [...new Set(selectedAmenities)]
        .map(tag => `<input type="hidden" name="listing[amenities][]" value="${tag}">`)
        .join("");

      selectedTopPicks = [...document.querySelectorAll("#topPicks .selected")].map(div => div.dataset.value);
      topPickInputs.innerHTML = [...new Set(selectedTopPicks)]
        .map(tag => `<input type="hidden" name="listing[topPicks][]" value="${tag}">`)
        .join("");
    });
        backBtn.onclick = () => {
          if (stepIndex > 0) {
            stepIndex--;
            updateStepUI();
          }
        };

        nextBtn.onclick = (e) => {
          e.preventDefault();
          const isLastStep = stepIndex === steps.length - 1;
          if (!isLastStep) {
            stepIndex++;
            updateStepUI();
          } else {
            updateSelectedInputs();
            toggleModal(false);
            document.body.style.overflow = "auto";
            checkbox.checked = false;
            stepIndex = 0;
            updateStepUI();
          }
        };

        function toggleModal(show) {
          enumWrapper.style.display = show ? "block" : "none";
          overlay.style.display = show ? "block" : "none";
        }

        box.addEventListener("click", () => {
          checkbox.checked = !checkbox.checked;
          toggleModal(checkbox.checked);
          document.body.style.overflow = checkbox.checked ? "hidden" : "auto";
        });

        overlay.addEventListener("click", () => {
          toggleModal(false);
          checkbox.checked = false;
          document.body.style.overflow = "auto";
        });

        document.getElementById("closeModalBtn").onclick = () => {
          toggleModal(false);
          checkbox.checked = false;
          document.body.style.overflow = "auto";
        };

        updateStepUI();
        updateSelectedInputs();
      })();
  </script>
</body>
